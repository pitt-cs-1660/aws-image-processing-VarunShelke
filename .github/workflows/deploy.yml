name: Deploy Lambda

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  CDK_STACK_NAME: Assignment3Stack  # CloudFormation stack name from CDK

jobs:
  deploy-resize:
    name: Deploy Resize Lambda
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get CloudFormation outputs
        id: cfn-outputs
        run: |
          LAMBDA_ROLE_ARN=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.CDK_STACK_NAME }} \
            --query 'Stacks[0].Outputs[?OutputKey==`LambdaExecutionRoleArn`].OutputValue' \
            --output text \
            --region ${{ env.AWS_REGION }})
          echo "lambda_role_arn=$LAMBDA_ROLE_ARN" >> $GITHUB_OUTPUT

          SNS_TOPIC_ARN=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.CDK_STACK_NAME }} \
            --query 'Stacks[0].Outputs[?OutputKey==`SnsTopicArn`].OutputValue' \
            --output text \
            --region ${{ env.AWS_REGION }})
          echo "sns_topic_arn=$SNS_TOPIC_ARN" >> $GITHUB_OUTPUT

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push resize image to Amazon ECR
        id: resize-build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: resize-lambda
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd lambdas/resize
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Check if Lambda function exists
        id: check-lambda-resize
        run: |
          if aws lambda get-function --function-name resize-lambda --region ${{ env.AWS_REGION }} 2>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Lambda function
        if: steps.check-lambda-resize.outputs.exists == 'false'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: resize-lambda
          IMAGE_TAG: ${{ github.sha }}
        run: |
          aws lambda create-function \
            --function-name resize-lambda \
            --package-type Image \
            --code ImageUri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --role ${{ steps.cfn-outputs.outputs.lambda_role_arn }} \
            --timeout 30 \
            --memory-size 512 \
            --region ${{ env.AWS_REGION }}

      - name: Update resize Lambda function
        if: steps.check-lambda-resize.outputs.exists == 'true'
        uses: aws-actions/aws-lambda-deploy@v1.1.0
        with:
          function-name: resize-lambda
          package-type: Image  # no zip!
          image-uri: ${{ steps.resize-build-image.outputs.image }}  # ECR image URI from previous step
          role: ${{ steps.cfn-outputs.outputs.lambda_role_arn }}
          publish: true

      - name: Subscribe resize Lambda to SNS with filter
        run: |
          # Get Lambda ARN
          LAMBDA_ARN=$(aws lambda get-function \
            --function-name resize-lambda \
            --query 'Configuration.FunctionArn' \
            --output text \
            --region ${{ env.AWS_REGION }})

          # Check if subscription already exists
          EXISTING_SUB=$(aws sns list-subscriptions-by-topic \
            --topic-arn ${{ steps.cfn-outputs.outputs.sns_topic_arn }} \
            --query "Subscriptions[?Endpoint=='$LAMBDA_ARN'].SubscriptionArn" \
            --output text \
            --region ${{ env.AWS_REGION }})

          # Subscribe if not already subscribed
          if [ -z "$EXISTING_SUB" ]; then
            SUB_ARN=$(aws sns subscribe \
              --topic-arn ${{ steps.cfn-outputs.outputs.sns_topic_arn }} \
              --protocol lambda \
              --notification-endpoint $LAMBDA_ARN \
              --query 'SubscriptionArn' \
              --output text \
              --region ${{ env.AWS_REGION }})
            echo "Created subscription: $SUB_ARN"
          else
            SUB_ARN=$EXISTING_SUB
            echo "Subscription already exists: $SUB_ARN"
          fi

          # Set filter policy for resize prefix
          aws sns set-subscription-attributes \
            --subscription-arn $SUB_ARN \
            --attribute-name FilterPolicy \
            --attribute-value '{"Records":{"s3":{"object":{"key":[{"prefix":"resize/"}]}}}}' \
            --region ${{ env.AWS_REGION }}

          # Grant SNS permission to invoke Lambda
          aws lambda add-permission \
            --function-name resize-lambda \
            --statement-id sns-invoke-resize \
            --action lambda:InvokeFunction \
            --principal sns.amazonaws.com \
            --source-arn ${{ steps.cfn-outputs.outputs.sns_topic_arn }} \
            --region ${{ env.AWS_REGION }} 2>/dev/null || echo "Permission already exists"

          echo "Resize Lambda subscribed to SNS with filter policy"

  deploy-greyscale:
    name: Deploy Greyscale Lambda
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get CloudFormation outputs
        id: cfn-outputs
        run: |
          LAMBDA_ROLE_ARN=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.CDK_STACK_NAME }} \
            --query 'Stacks[0].Outputs[?OutputKey==`LambdaExecutionRoleArn`].OutputValue' \
            --output text \
            --region ${{ env.AWS_REGION }})
          echo "lambda_role_arn=$LAMBDA_ROLE_ARN" >> $GITHUB_OUTPUT

          SNS_TOPIC_ARN=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.CDK_STACK_NAME }} \
            --query 'Stacks[0].Outputs[?OutputKey==`SnsTopicArn`].OutputValue' \
            --output text \
            --region ${{ env.AWS_REGION }})
          echo "sns_topic_arn=$SNS_TOPIC_ARN" >> $GITHUB_OUTPUT

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push greyscale image to Amazon ECR
        id: greyscale-build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: greyscale-lambda
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd lambdas/greyscale
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Check if Lambda function exists
        id: check-lambda-greyscale
        run: |
          if aws lambda get-function --function-name greyscale-lambda --region ${{ env.AWS_REGION }} 2>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Lambda function
        if: steps.check-lambda-greyscale.outputs.exists == 'false'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: greyscale-lambda
          IMAGE_TAG: ${{ github.sha }}
        run: |
          aws lambda create-function \
            --function-name greyscale-lambda \
            --package-type Image \
            --code ImageUri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --role ${{ steps.cfn-outputs.outputs.lambda_role_arn }} \
            --timeout 30 \
            --memory-size 512 \
            --region ${{ env.AWS_REGION }}

      - name: Update greyscale Lambda function
        if: steps.check-lambda-greyscale.outputs.exists == 'true'
        uses: aws-actions/aws-lambda-deploy@v1.1.0
        with:
          function-name: greyscale-lambda
          package-type: Image  # no zip!
          image-uri: ${{ steps.greyscale-build-image.outputs.image }}  # ECR image URI from previous step
          role: ${{ steps.cfn-outputs.outputs.lambda_role_arn }}
          publish: true

      - name: Subscribe greyscale Lambda to SNS with filter
        run: |
          # Get Lambda ARN
          LAMBDA_ARN=$(aws lambda get-function \
            --function-name greyscale-lambda \
            --query 'Configuration.FunctionArn' \
            --output text \
            --region ${{ env.AWS_REGION }})

          # Check if subscription already exists
          EXISTING_SUB=$(aws sns list-subscriptions-by-topic \
            --topic-arn ${{ steps.cfn-outputs.outputs.sns_topic_arn }} \
            --query "Subscriptions[?Endpoint=='$LAMBDA_ARN'].SubscriptionArn" \
            --output text \
            --region ${{ env.AWS_REGION }})

          # Subscribe if not already subscribed
          if [ -z "$EXISTING_SUB" ]; then
            SUB_ARN=$(aws sns subscribe \
              --topic-arn ${{ steps.cfn-outputs.outputs.sns_topic_arn }} \
              --protocol lambda \
              --notification-endpoint $LAMBDA_ARN \
              --query 'SubscriptionArn' \
              --output text \
              --region ${{ env.AWS_REGION }})
            echo "Created subscription: $SUB_ARN"
          else
            SUB_ARN=$EXISTING_SUB
            echo "Subscription already exists: $SUB_ARN"
          fi

          # Set filter policy for greyscale prefix
          aws sns set-subscription-attributes \
            --subscription-arn $SUB_ARN \
            --attribute-name FilterPolicy \
            --attribute-value '{"Records":{"s3":{"object":{"key":[{"prefix":"greyscale/"}]}}}}' \
            --region ${{ env.AWS_REGION }}

          # Grant SNS permission to invoke Lambda
          aws lambda add-permission \
            --function-name greyscale-lambda \
            --statement-id sns-invoke-greyscale \
            --action lambda:InvokeFunction \
            --principal sns.amazonaws.com \
            --source-arn ${{ steps.cfn-outputs.outputs.sns_topic_arn }} \
            --region ${{ env.AWS_REGION }} 2>/dev/null || echo "Permission already exists"

          echo "Greyscale Lambda subscribed to SNS with filter policy"

  deploy-exif:
    name: Deploy EXIF Lambda
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get CloudFormation outputs
        id: cfn-outputs
        run: |
          LAMBDA_ROLE_ARN=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.CDK_STACK_NAME }} \
            --query 'Stacks[0].Outputs[?OutputKey==`LambdaExecutionRoleArn`].OutputValue' \
            --output text \
            --region ${{ env.AWS_REGION }})
          echo "lambda_role_arn=$LAMBDA_ROLE_ARN" >> $GITHUB_OUTPUT

          SNS_TOPIC_ARN=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.CDK_STACK_NAME }} \
            --query 'Stacks[0].Outputs[?OutputKey==`SnsTopicArn`].OutputValue' \
            --output text \
            --region ${{ env.AWS_REGION }})
          echo "sns_topic_arn=$SNS_TOPIC_ARN" >> $GITHUB_OUTPUT

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push exif image to Amazon ECR
        id: exif-build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: exif-lambda
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd lambdas/exif
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Check if Lambda function exists
        id: check-lambda-exif
        run: |
          if aws lambda get-function --function-name exif-lambda --region ${{ env.AWS_REGION }} 2>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Lambda function
        if: steps.check-lambda-exif.outputs.exists == 'false'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: exif-lambda
          IMAGE_TAG: ${{ github.sha }}
        run: |
          aws lambda create-function \
            --function-name exif-lambda \
            --package-type Image \
            --code ImageUri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --role ${{ steps.cfn-outputs.outputs.lambda_role_arn }} \
            --timeout 30 \
            --memory-size 512 \
            --region ${{ env.AWS_REGION }}

      - name: Update exif Lambda function
        if: steps.check-lambda-exif.outputs.exists == 'true'
        uses: aws-actions/aws-lambda-deploy@v1.1.0
        with:
          function-name: exif-lambda
          package-type: Image  # no zip!
          image-uri: ${{ steps.exif-build-image.outputs.image }}  # ECR image URI from previous step
          role: ${{ steps.cfn-outputs.outputs.lambda_role_arn }}
          publish: true

      - name: Subscribe exif Lambda to SNS with filter
        run: |
          # Get Lambda ARN
          LAMBDA_ARN=$(aws lambda get-function \
            --function-name exif-lambda \
            --query 'Configuration.FunctionArn' \
            --output text \
            --region ${{ env.AWS_REGION }})

          # Check if subscription already exists
          EXISTING_SUB=$(aws sns list-subscriptions-by-topic \
            --topic-arn ${{ steps.cfn-outputs.outputs.sns_topic_arn }} \
            --query "Subscriptions[?Endpoint=='$LAMBDA_ARN'].SubscriptionArn" \
            --output text \
            --region ${{ env.AWS_REGION }})

          # Subscribe if not already subscribed
          if [ -z "$EXISTING_SUB" ]; then
            SUB_ARN=$(aws sns subscribe \
              --topic-arn ${{ steps.cfn-outputs.outputs.sns_topic_arn }} \
              --protocol lambda \
              --notification-endpoint $LAMBDA_ARN \
              --query 'SubscriptionArn' \
              --output text \
              --region ${{ env.AWS_REGION }})
            echo "Created subscription: $SUB_ARN"
          else
            SUB_ARN=$EXISTING_SUB
            echo "Subscription already exists: $SUB_ARN"
          fi

          # Set filter policy for exif prefix
          aws sns set-subscription-attributes \
            --subscription-arn $SUB_ARN \
            --attribute-name FilterPolicy \
            --attribute-value '{"Records":{"s3":{"object":{"key":[{"prefix":"exif/"}]}}}}' \
            --region ${{ env.AWS_REGION }}

          # Grant SNS permission to invoke Lambda
          aws lambda add-permission \
            --function-name exif-lambda \
            --statement-id sns-invoke-exif \
            --action lambda:InvokeFunction \
            --principal sns.amazonaws.com \
            --source-arn ${{ steps.cfn-outputs.outputs.sns_topic_arn }} \
            --region ${{ env.AWS_REGION }} 2>/dev/null || echo "Permission already exists"

          echo "EXIF Lambda subscribed to SNS with filter policy"

